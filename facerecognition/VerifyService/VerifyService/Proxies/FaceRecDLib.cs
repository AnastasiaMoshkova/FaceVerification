//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace facerecognition {

public class FaceRecDLib : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FaceRecDLib(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FaceRecDLib obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FaceRecDLib() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          facerecognitionPINVOKE.delete_FaceRecDLib(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FaceRecDLib() : this(facerecognitionPINVOKE.new_FaceRecDLib(), true) {
  }

  public string face_descriptor_calc(string image_path) {
    string ret = facerecognitionPINVOKE.FaceRecDLib_face_descriptor_calc(swigCPtr, image_path);
    if (facerecognitionPINVOKE.SWIGPendingException.Pending) throw facerecognitionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double descriptions_compare(string descriptors_from_foto, string descriptors_from_base) {
    double ret = facerecognitionPINVOKE.FaceRecDLib_descriptions_compare(swigCPtr, descriptors_from_foto, descriptors_from_base);
    if (facerecognitionPINVOKE.SWIGPendingException.Pending) throw facerecognitionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultVerify face_verification(string face_descriptors_string, string video_path, double level_verification) {
    ResultVerify ret = new ResultVerify(facerecognitionPINVOKE.FaceRecDLib_face_verification(swigCPtr, face_descriptors_string, video_path, level_verification), true);
    if (facerecognitionPINVOKE.SWIGPendingException.Pending) throw facerecognitionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultVerify face_verification_threads(string face_descriptors_string, string video_path, double level_verification) {
    ResultVerify ret = new ResultVerify(facerecognitionPINVOKE.FaceRecDLib_face_verification_threads(swigCPtr, face_descriptors_string, video_path, level_verification), true);
    if (facerecognitionPINVOKE.SWIGPendingException.Pending) throw facerecognitionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
